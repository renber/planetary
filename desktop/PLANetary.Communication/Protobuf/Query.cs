// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: query.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PLANetary.Communication.Protobuf {

  /// <summary>Holder for reflection information generated from query.proto</summary>
  public static partial class QueryReflection {

    #region Descriptor
    /// <summary>File descriptor for query.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QueryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtxdWVyeS5wcm90bxoQaWRlbnRpZmllci5wcm90bxoPY29uZGl0aW9uLnBy",
            "b3RvIqcBCgVRdWVyeRIZCgdxdWVyeUlkGAEgASgLMgguUXVlcnlJZBITCgtw",
            "ZXJpb2RJblNlYxgCIAEoDRIqChJjb25kaXRpb25Hcm91cExpbmsYAyABKA4y",
            "Di5Db25kaXRpb25MaW5rEigKD2NvbmRpdGlvbkdyb3VwcxgEIAMoCzIPLkNv",
            "bmRpdGlvbkdyb3VwEhgKB2FjdGlvbnMYBSADKAsyBy5BY3Rpb24iZAoGQWN0",
            "aW9uEh0KCHNlbGVjdG9yGAEgASgLMgkuU2VsZWN0b3JIABIXCgVhY3RvchgC",
            "IAEoCzIGLkFjdG9ySAASFwoFZXZlbnQYAyABKAsyBi5FdmVudEgAQgkKB2Nv",
            "bnRlbnQiRgoIU2VsZWN0b3ISGwoEdHlwZRgBIAEoDjINLlNlbGVjdG9yVHlw",
            "ZRIdCghzZW5zb3JJZBgCIAEoCzILLklkZW50aWZpZXIiNAoFQWN0b3ISHAoH",
            "YWN0b3JJZBgBIAEoCzILLklkZW50aWZpZXISDQoFcGFyYW0YAiABKA0iJQoF",
            "RXZlbnQSHAoHZXZlbnRJZBgBIAEoCzILLklkZW50aWZpZXIqOgoKQWN0aW9u",
            "VHlwZRIICgROT05FEAASDAoIU0VMRUNUT1IQARIJCgVBQ1RPUhACEgkKBUVW",
            "RU5UEAMqVwoMU2VsZWN0b3JUeXBlEgoKBlNJTkdMRRAAEgcKA1NVTRABEgcK",
            "A01BWBACEgcKA01JThADEgcKA0FWRxAEEgkKBUNPVU5UEAUSDAoIR1JPVVBf",
            "QlkQBkIjqgIgUExBTmV0YXJ5LkNvbW11bmljYXRpb24uUHJvdG9idWZiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PLANetary.Communication.Protobuf.IdentifierReflection.Descriptor, global::PLANetary.Communication.Protobuf.ConditionReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PLANetary.Communication.Protobuf.ActionType), typeof(global::PLANetary.Communication.Protobuf.SelectorType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PLANetary.Communication.Protobuf.Query), global::PLANetary.Communication.Protobuf.Query.Parser, new[]{ "QueryId", "PeriodInSec", "ConditionGroupLink", "ConditionGroups", "Actions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PLANetary.Communication.Protobuf.Action), global::PLANetary.Communication.Protobuf.Action.Parser, new[]{ "Selector", "Actor", "Event" }, new[]{ "Content" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PLANetary.Communication.Protobuf.Selector), global::PLANetary.Communication.Protobuf.Selector.Parser, new[]{ "Type", "SensorId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PLANetary.Communication.Protobuf.Actor), global::PLANetary.Communication.Protobuf.Actor.Parser, new[]{ "ActorId", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PLANetary.Communication.Protobuf.Event), global::PLANetary.Communication.Protobuf.Event.Parser, new[]{ "EventId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// used to identify the content-type of an Action
  /// </summary>
  public enum ActionType {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("SELECTOR")] Selector = 1,
    [pbr::OriginalName("ACTOR")] Actor = 2,
    [pbr::OriginalName("EVENT")] Event = 3,
  }

  public enum SelectorType {
    [pbr::OriginalName("SINGLE")] Single = 0,
    [pbr::OriginalName("SUM")] Sum = 1,
    [pbr::OriginalName("MAX")] Max = 2,
    [pbr::OriginalName("MIN")] Min = 3,
    [pbr::OriginalName("AVG")] Avg = 4,
    [pbr::OriginalName("COUNT")] Count = 5,
    [pbr::OriginalName("GROUP_BY")] GroupBy = 6,
  }

  #endregion

  #region Messages
  public sealed partial class Query : pb::IMessage<Query> {
    private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Query> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLANetary.Communication.Protobuf.QueryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query(Query other) : this() {
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      periodInSec_ = other.periodInSec_;
      conditionGroupLink_ = other.conditionGroupLink_;
      conditionGroups_ = other.conditionGroups_.Clone();
      actions_ = other.actions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query Clone() {
      return new Query(this);
    }

    /// <summary>Field number for the "queryId" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private global::PLANetary.Communication.Protobuf.QueryId queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PLANetary.Communication.Protobuf.QueryId QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "periodInSec" field.</summary>
    public const int PeriodInSecFieldNumber = 2;
    private uint periodInSec_;
    /// <summary>
    /// if this is a periodic query, a period is given here
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PeriodInSec {
      get { return periodInSec_; }
      set {
        periodInSec_ = value;
      }
    }

    /// <summary>Field number for the "conditionGroupLink" field.</summary>
    public const int ConditionGroupLinkFieldNumber = 3;
    private global::PLANetary.Communication.Protobuf.ConditionLink conditionGroupLink_ = 0;
    /// <summary>
    /// query (execution) conditions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PLANetary.Communication.Protobuf.ConditionLink ConditionGroupLink {
      get { return conditionGroupLink_; }
      set {
        conditionGroupLink_ = value;
      }
    }

    /// <summary>Field number for the "conditionGroups" field.</summary>
    public const int ConditionGroupsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PLANetary.Communication.Protobuf.ConditionGroup> _repeated_conditionGroups_codec
        = pb::FieldCodec.ForMessage(34, global::PLANetary.Communication.Protobuf.ConditionGroup.Parser);
    private readonly pbc::RepeatedField<global::PLANetary.Communication.Protobuf.ConditionGroup> conditionGroups_ = new pbc::RepeatedField<global::PLANetary.Communication.Protobuf.ConditionGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PLANetary.Communication.Protobuf.ConditionGroup> ConditionGroups {
      get { return conditionGroups_; }
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PLANetary.Communication.Protobuf.Action> _repeated_actions_codec
        = pb::FieldCodec.ForMessage(42, global::PLANetary.Communication.Protobuf.Action.Parser);
    private readonly pbc::RepeatedField<global::PLANetary.Communication.Protobuf.Action> actions_ = new pbc::RepeatedField<global::PLANetary.Communication.Protobuf.Action>();
    /// <summary>
    /// definitions what to do, when the query conditions are met
    /// i.e.
    /// (1) selections to execute when the conditions are met (these will be sent back to the sink)
    /// (2) actor functions to call when the conditions are met
    /// (3) events to raise when the conditions are met
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PLANetary.Communication.Protobuf.Action> Actions {
      get { return actions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Query);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Query other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (PeriodInSec != other.PeriodInSec) return false;
      if (ConditionGroupLink != other.ConditionGroupLink) return false;
      if(!conditionGroups_.Equals(other.conditionGroups_)) return false;
      if(!actions_.Equals(other.actions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (PeriodInSec != 0) hash ^= PeriodInSec.GetHashCode();
      if (ConditionGroupLink != 0) hash ^= ConditionGroupLink.GetHashCode();
      hash ^= conditionGroups_.GetHashCode();
      hash ^= actions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (PeriodInSec != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PeriodInSec);
      }
      if (ConditionGroupLink != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ConditionGroupLink);
      }
      conditionGroups_.WriteTo(output, _repeated_conditionGroups_codec);
      actions_.WriteTo(output, _repeated_actions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (PeriodInSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PeriodInSec);
      }
      if (ConditionGroupLink != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConditionGroupLink);
      }
      size += conditionGroups_.CalculateSize(_repeated_conditionGroups_codec);
      size += actions_.CalculateSize(_repeated_actions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Query other) {
      if (other == null) {
        return;
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          queryId_ = new global::PLANetary.Communication.Protobuf.QueryId();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.PeriodInSec != 0) {
        PeriodInSec = other.PeriodInSec;
      }
      if (other.ConditionGroupLink != 0) {
        ConditionGroupLink = other.ConditionGroupLink;
      }
      conditionGroups_.Add(other.conditionGroups_);
      actions_.Add(other.actions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryId_ == null) {
              queryId_ = new global::PLANetary.Communication.Protobuf.QueryId();
            }
            input.ReadMessage(queryId_);
            break;
          }
          case 16: {
            PeriodInSec = input.ReadUInt32();
            break;
          }
          case 24: {
            conditionGroupLink_ = (global::PLANetary.Communication.Protobuf.ConditionLink) input.ReadEnum();
            break;
          }
          case 34: {
            conditionGroups_.AddEntriesFrom(input, _repeated_conditionGroups_codec);
            break;
          }
          case 42: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Action : pb::IMessage<Action> {
    private static readonly pb::MessageParser<Action> _parser = new pb::MessageParser<Action>(() => new Action());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLANetary.Communication.Protobuf.QueryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action(Action other) : this() {
      switch (other.ContentCase) {
        case ContentOneofCase.Selector:
          Selector = other.Selector.Clone();
          break;
        case ContentOneofCase.Actor:
          Actor = other.Actor.Clone();
          break;
        case ContentOneofCase.Event:
          Event = other.Event.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action Clone() {
      return new Action(this);
    }

    /// <summary>Field number for the "selector" field.</summary>
    public const int SelectorFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PLANetary.Communication.Protobuf.Selector Selector {
      get { return contentCase_ == ContentOneofCase.Selector ? (global::PLANetary.Communication.Protobuf.Selector) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Selector;
      }
    }

    /// <summary>Field number for the "actor" field.</summary>
    public const int ActorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PLANetary.Communication.Protobuf.Actor Actor {
      get { return contentCase_ == ContentOneofCase.Actor ? (global::PLANetary.Communication.Protobuf.Actor) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Actor;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PLANetary.Communication.Protobuf.Event Event {
      get { return contentCase_ == ContentOneofCase.Event ? (global::PLANetary.Communication.Protobuf.Event) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Event;
      }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      Selector = 1,
      Actor = 2,
      Event = 3,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selector, other.Selector)) return false;
      if (!object.Equals(Actor, other.Actor)) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (ContentCase != other.ContentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contentCase_ == ContentOneofCase.Selector) hash ^= Selector.GetHashCode();
      if (contentCase_ == ContentOneofCase.Actor) hash ^= Actor.GetHashCode();
      if (contentCase_ == ContentOneofCase.Event) hash ^= Event.GetHashCode();
      hash ^= (int) contentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contentCase_ == ContentOneofCase.Selector) {
        output.WriteRawTag(10);
        output.WriteMessage(Selector);
      }
      if (contentCase_ == ContentOneofCase.Actor) {
        output.WriteRawTag(18);
        output.WriteMessage(Actor);
      }
      if (contentCase_ == ContentOneofCase.Event) {
        output.WriteRawTag(26);
        output.WriteMessage(Event);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contentCase_ == ContentOneofCase.Selector) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selector);
      }
      if (contentCase_ == ContentOneofCase.Actor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Actor);
      }
      if (contentCase_ == ContentOneofCase.Event) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action other) {
      if (other == null) {
        return;
      }
      switch (other.ContentCase) {
        case ContentOneofCase.Selector:
          if (Selector == null) {
            Selector = new global::PLANetary.Communication.Protobuf.Selector();
          }
          Selector.MergeFrom(other.Selector);
          break;
        case ContentOneofCase.Actor:
          if (Actor == null) {
            Actor = new global::PLANetary.Communication.Protobuf.Actor();
          }
          Actor.MergeFrom(other.Actor);
          break;
        case ContentOneofCase.Event:
          if (Event == null) {
            Event = new global::PLANetary.Communication.Protobuf.Event();
          }
          Event.MergeFrom(other.Event);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::PLANetary.Communication.Protobuf.Selector subBuilder = new global::PLANetary.Communication.Protobuf.Selector();
            if (contentCase_ == ContentOneofCase.Selector) {
              subBuilder.MergeFrom(Selector);
            }
            input.ReadMessage(subBuilder);
            Selector = subBuilder;
            break;
          }
          case 18: {
            global::PLANetary.Communication.Protobuf.Actor subBuilder = new global::PLANetary.Communication.Protobuf.Actor();
            if (contentCase_ == ContentOneofCase.Actor) {
              subBuilder.MergeFrom(Actor);
            }
            input.ReadMessage(subBuilder);
            Actor = subBuilder;
            break;
          }
          case 26: {
            global::PLANetary.Communication.Protobuf.Event subBuilder = new global::PLANetary.Communication.Protobuf.Event();
            if (contentCase_ == ContentOneofCase.Event) {
              subBuilder.MergeFrom(Event);
            }
            input.ReadMessage(subBuilder);
            Event = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Selector : pb::IMessage<Selector> {
    private static readonly pb::MessageParser<Selector> _parser = new pb::MessageParser<Selector>(() => new Selector());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Selector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLANetary.Communication.Protobuf.QueryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Selector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Selector(Selector other) : this() {
      type_ = other.type_;
      sensorId_ = other.sensorId_ != null ? other.sensorId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Selector Clone() {
      return new Selector(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::PLANetary.Communication.Protobuf.SelectorType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PLANetary.Communication.Protobuf.SelectorType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "sensorId" field.</summary>
    public const int SensorIdFieldNumber = 2;
    private global::PLANetary.Communication.Protobuf.Identifier sensorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PLANetary.Communication.Protobuf.Identifier SensorId {
      get { return sensorId_; }
      set {
        sensorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Selector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Selector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(SensorId, other.SensorId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (sensorId_ != null) hash ^= SensorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (sensorId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SensorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (sensorId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SensorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Selector other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.sensorId_ != null) {
        if (sensorId_ == null) {
          sensorId_ = new global::PLANetary.Communication.Protobuf.Identifier();
        }
        SensorId.MergeFrom(other.SensorId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::PLANetary.Communication.Protobuf.SelectorType) input.ReadEnum();
            break;
          }
          case 18: {
            if (sensorId_ == null) {
              sensorId_ = new global::PLANetary.Communication.Protobuf.Identifier();
            }
            input.ReadMessage(sensorId_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Actor : pb::IMessage<Actor> {
    private static readonly pb::MessageParser<Actor> _parser = new pb::MessageParser<Actor>(() => new Actor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Actor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLANetary.Communication.Protobuf.QueryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Actor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Actor(Actor other) : this() {
      actorId_ = other.actorId_ != null ? other.actorId_.Clone() : null;
      param_ = other.param_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Actor Clone() {
      return new Actor(this);
    }

    /// <summary>Field number for the "actorId" field.</summary>
    public const int ActorIdFieldNumber = 1;
    private global::PLANetary.Communication.Protobuf.Identifier actorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PLANetary.Communication.Protobuf.Identifier ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 2;
    private uint param_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Actor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Actor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ActorId, other.ActorId)) return false;
      if (Param != other.Param) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actorId_ != null) hash ^= ActorId.GetHashCode();
      if (Param != 0) hash ^= Param.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (actorId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ActorId);
      }
      if (Param != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Param);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actorId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActorId);
      }
      if (Param != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Param);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Actor other) {
      if (other == null) {
        return;
      }
      if (other.actorId_ != null) {
        if (actorId_ == null) {
          actorId_ = new global::PLANetary.Communication.Protobuf.Identifier();
        }
        ActorId.MergeFrom(other.ActorId);
      }
      if (other.Param != 0) {
        Param = other.Param;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (actorId_ == null) {
              actorId_ = new global::PLANetary.Communication.Protobuf.Identifier();
            }
            input.ReadMessage(actorId_);
            break;
          }
          case 16: {
            Param = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLANetary.Communication.Protobuf.QueryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      eventId_ = other.eventId_ != null ? other.eventId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    private global::PLANetary.Communication.Protobuf.Identifier eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PLANetary.Communication.Protobuf.Identifier EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EventId, other.EventId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventId_ != null) hash ^= EventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.eventId_ != null) {
        if (eventId_ == null) {
          eventId_ = new global::PLANetary.Communication.Protobuf.Identifier();
        }
        EventId.MergeFrom(other.EventId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (eventId_ == null) {
              eventId_ = new global::PLANetary.Communication.Protobuf.Identifier();
            }
            input.ReadMessage(eventId_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
