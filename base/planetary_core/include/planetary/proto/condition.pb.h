/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.2 */

#ifndef PB_CONDITION_PB_H_INCLUDED
#define PB_CONDITION_PB_H_INCLUDED
#include <nanopb/pb.h>
#include <planetary/proto/identifier.pb.h>
/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _ConditionLink {
    ConditionLink_AND = 0,
    ConditionLink_OR = 1
} ConditionLink;
#define _ConditionLink_MIN ConditionLink_AND
#define _ConditionLink_MAX ConditionLink_OR
#define _ConditionLink_ARRAYSIZE ((ConditionLink)(ConditionLink_OR+1))

typedef enum _ValueOperator {
    ValueOperator_EQUAL = 0,
    ValueOperator_GREATER = 1,
    ValueOperator_GREATER_OR_EQUAL = 2,
    ValueOperator_LESS = 3,
    ValueOperator_LESS_OR_EQUAL = 4,
    ValueOperator_NOT = 5
} ValueOperator;
#define _ValueOperator_MIN ValueOperator_EQUAL
#define _ValueOperator_MAX ValueOperator_NOT
#define _ValueOperator_ARRAYSIZE ((ValueOperator)(ValueOperator_NOT+1))

/* Struct definitions */
typedef struct _Condition {
    Identifier identifier;
    ValueOperator op;
    float value;
/* @@protoc_insertion_point(struct:Condition) */
} Condition;

typedef struct _ConditionGroup {
    ConditionLink conditionLink;
    pb_size_t conditions_count;
    Condition conditions[4];
/* @@protoc_insertion_point(struct:ConditionGroup) */
} ConditionGroup;

/* Default values for struct fields */

/* Initializer values for message structs */
#define ConditionGroup_init_default              {_ConditionLink_MIN, 0, {Condition_init_default, Condition_init_default, Condition_init_default, Condition_init_default}}
#define Condition_init_default                   {Identifier_init_default, _ValueOperator_MIN, 0}
#define ConditionGroup_init_zero                 {_ConditionLink_MIN, 0, {Condition_init_zero, Condition_init_zero, Condition_init_zero, Condition_init_zero}}
#define Condition_init_zero                      {Identifier_init_zero, _ValueOperator_MIN, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Condition_identifier_tag                 1
#define Condition_op_tag                         2
#define Condition_value_tag                      3
#define ConditionGroup_conditionLink_tag         1
#define ConditionGroup_conditions_tag            2

/* Struct field encoding specification for nanopb */
extern const pb_field_t ConditionGroup_fields[3];
extern const pb_field_t Condition_fields[4];

/* Maximum encoded size of messages (where known) */
#define ConditionGroup_size                      (78 + 4*Identifier_size)
#define Condition_size                           (13 + Identifier_size)

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define CONDITION_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
