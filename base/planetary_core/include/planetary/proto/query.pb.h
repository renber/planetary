/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.9 */

#ifndef PB_QUERY_PB_H_INCLUDED
#define PB_QUERY_PB_H_INCLUDED
#include <nanopb/pb.h>
#include <planetary/proto/identifier.pb.h>
#include <planetary/proto/condition.pb.h>
#include <planetary/proto/store.pb.h>
/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _SourceType {
    SourceType_SOURCENONE = 0,
    SourceType_SOURCESENSOR = 1,
    SourceType_SOURCESTORE = 2
} SourceType;
#define _SourceType_MIN SourceType_SOURCENONE
#define _SourceType_MAX SourceType_SOURCESTORE
#define _SourceType_ARRAYSIZE ((SourceType)(SourceType_SOURCESTORE+1))

typedef enum _TargetType {
    TargetType_TARGETNONE = 0,
    TargetType_TARGETSINK = 1,
    TargetType_TARGETSTORE = 2
} TargetType;
#define _TargetType_MIN TargetType_TARGETNONE
#define _TargetType_MAX TargetType_TARGETSTORE
#define _TargetType_ARRAYSIZE ((TargetType)(TargetType_TARGETSTORE+1))

typedef enum _ActionType {
    ActionType_NONE = 0,
    ActionType_SELECTOR = 1,
    ActionType_ACTOR = 2,
    ActionType_EVENT = 3,
    ActionType_STORE = 4
} ActionType;
#define _ActionType_MIN ActionType_NONE
#define _ActionType_MAX ActionType_STORE
#define _ActionType_ARRAYSIZE ((ActionType)(ActionType_STORE+1))

typedef enum _SelectorType {
    SelectorType_SINGLE = 0,
    SelectorType_SUM = 1,
    SelectorType_MAX = 2,
    SelectorType_MIN = 3,
    SelectorType_AVG = 4,
    SelectorType_COUNT = 5,
    SelectorType_GROUP_BY = 6
} SelectorType;
#define _SelectorType_MIN SelectorType_SINGLE
#define _SelectorType_MAX SelectorType_GROUP_BY
#define _SelectorType_ARRAYSIZE ((SelectorType)(SelectorType_GROUP_BY+1))

/* Struct definitions */
typedef struct _SinkTarget {
    char dummy_field;
/* @@protoc_insertion_point(struct:SinkTarget) */
} SinkTarget;

typedef struct _Actor {
    Identifier actorId;
    uint32_t param;
/* @@protoc_insertion_point(struct:Actor) */
} Actor;

typedef struct _Event {
    Identifier eventId;
/* @@protoc_insertion_point(struct:Event) */
} Event;

typedef struct _SensorSource {
    Identifier sensorId;
/* @@protoc_insertion_point(struct:SensorSource) */
} SensorSource;

typedef struct _StoreSource {
    char storeName[10];
    float param;
/* @@protoc_insertion_point(struct:StoreSource) */
} StoreSource;

typedef struct _StoreTarget {
    char storeName[10];
/* @@protoc_insertion_point(struct:StoreTarget) */
} StoreTarget;

typedef struct _ResultTarget {
    pb_size_t which_target;
    union {
        SinkTarget sink;
        StoreTarget storeTarget;
    } target;
/* @@protoc_insertion_point(struct:ResultTarget) */
} ResultTarget;

typedef struct _Selector {
    pb_size_t which_source;
    union {
        SensorSource sensor;
        StoreSource store;
    } source;
    SelectorType type;
/* @@protoc_insertion_point(struct:Selector) */
} Selector;

typedef struct _Action {
    pb_size_t which_content;
    union {
        Selector selector;
        Actor actor;
        Event event;
        Store store;
    } content;
/* @@protoc_insertion_point(struct:Action) */
} Action;

typedef struct _Query {
    QueryId queryId;
    uint32_t periodInSec;
    ConditionLink conditionGroupLink;
    pb_size_t conditionGroups_count;
    ConditionGroup conditionGroups[4];
    pb_size_t actions_count;
    Action actions[10];
    ResultTarget resultTarget;
/* @@protoc_insertion_point(struct:Query) */
} Query;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Query_init_default                       {QueryId_init_default, 0, _ConditionLink_MIN, 0, {ConditionGroup_init_default, ConditionGroup_init_default, ConditionGroup_init_default, ConditionGroup_init_default}, 0, {Action_init_default, Action_init_default, Action_init_default, Action_init_default, Action_init_default, Action_init_default, Action_init_default, Action_init_default, Action_init_default, Action_init_default}, ResultTarget_init_default}
#define ResultTarget_init_default                {0, {SinkTarget_init_default}}
#define SinkTarget_init_default                  {0}
#define StoreTarget_init_default                 {""}
#define Action_init_default                      {0, {Selector_init_default}}
#define Selector_init_default                    {0, {SensorSource_init_default}, _SelectorType_MIN}
#define SensorSource_init_default                {Identifier_init_default}
#define StoreSource_init_default                 {"", 0}
#define Actor_init_default                       {Identifier_init_default, 0}
#define Event_init_default                       {Identifier_init_default}
#define Query_init_zero                          {QueryId_init_zero, 0, _ConditionLink_MIN, 0, {ConditionGroup_init_zero, ConditionGroup_init_zero, ConditionGroup_init_zero, ConditionGroup_init_zero}, 0, {Action_init_zero, Action_init_zero, Action_init_zero, Action_init_zero, Action_init_zero, Action_init_zero, Action_init_zero, Action_init_zero, Action_init_zero, Action_init_zero}, ResultTarget_init_zero}
#define ResultTarget_init_zero                   {0, {SinkTarget_init_zero}}
#define SinkTarget_init_zero                     {0}
#define StoreTarget_init_zero                    {""}
#define Action_init_zero                         {0, {Selector_init_zero}}
#define Selector_init_zero                       {0, {SensorSource_init_zero}, _SelectorType_MIN}
#define SensorSource_init_zero                   {Identifier_init_zero}
#define StoreSource_init_zero                    {"", 0}
#define Actor_init_zero                          {Identifier_init_zero, 0}
#define Event_init_zero                          {Identifier_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define Actor_actorId_tag                        1
#define Actor_param_tag                          2
#define Event_eventId_tag                        1
#define SensorSource_sensorId_tag                1
#define StoreSource_storeName_tag                1
#define StoreSource_param_tag                    2
#define StoreTarget_storeName_tag                1
#define ResultTarget_sink_tag                    1
#define ResultTarget_storeTarget_tag             2
#define Selector_sensor_tag                      1
#define Selector_store_tag                       2
#define Selector_type_tag                        3
#define Action_selector_tag                      1
#define Action_actor_tag                         2
#define Action_event_tag                         3
#define Action_store_tag                         4
#define Query_queryId_tag                        1
#define Query_periodInSec_tag                    2
#define Query_conditionGroupLink_tag             3
#define Query_conditionGroups_tag                4
#define Query_actions_tag                        5
#define Query_resultTarget_tag                   6

/* Struct field encoding specification for nanopb */
extern const pb_field_t Query_fields[7];
extern const pb_field_t ResultTarget_fields[3];
extern const pb_field_t SinkTarget_fields[1];
extern const pb_field_t StoreTarget_fields[2];
extern const pb_field_t Action_fields[5];
extern const pb_field_t Selector_fields[4];
extern const pb_field_t SensorSource_fields[2];
extern const pb_field_t StoreSource_fields[3];
extern const pb_field_t Actor_fields[3];
extern const pb_field_t Event_fields[2];

/* Maximum encoded size of messages (where known) */
#define Query_size                               (173 + QueryId_size + 4*ConditionGroup_size + 10*sizeof(union{char f1[sizeof(union{char f0[19]; char f1[Identifier_size];})]; char f2[Identifier_size]; char f3[Identifier_size]; char f4[Store_size];}))
#define ResultTarget_size                        14
#define SinkTarget_size                          0
#define StoreTarget_size                         12
#define Action_size                              (5 + sizeof(union{char f1[sizeof(union{char f0[19]; char f1[Identifier_size];})]; char f2[Identifier_size]; char f3[Identifier_size]; char f4[Store_size];}))
#define Selector_size                            (7 + sizeof(union{char f0[19]; char f1[Identifier_size];}))
#define SensorSource_size                        (6 + Identifier_size)
#define StoreSource_size                         17
#define Actor_size                               (12 + Identifier_size)
#define Event_size                               (6 + Identifier_size)

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define QUERY_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
